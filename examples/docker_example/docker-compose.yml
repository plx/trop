version: '3.8'

services:
  # Web frontend
  web:
    image: nginx:alpine
    ports:
      # Use env var from .env file, with fallback default
      - "${WEB_PORT:-8080}:80"
    volumes:
      - ./web:/usr/share/nginx/html:ro
    depends_on:
      - api

  # API backend
  api:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "${API_PORT:-8081}:3000"
    environment:
      # Pass database and redis URLs with dynamic ports
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/myapp
      - REDIS_URL=redis://redis:6379
      - PORT=3000
    volumes:
      - ./api:/app:ro
    depends_on:
      - db
      - redis
    command: node server.js

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    ports:
      # Expose DB port for local development/debugging
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=myapp
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - db_data:/var/lib/postgresql/data

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Prometheus metrics
  metrics:
    image: prom/prometheus:latest
    ports:
      - "${METRICS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - metrics_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

volumes:
  db_data:
  redis_data:
  metrics_data:

networks:
  default:
    name: trop_example_network
