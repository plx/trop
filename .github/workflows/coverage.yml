name: Code Coverage and Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      # Generate coverage in LCOV format for Codecov
      - name: Generate code coverage
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info

      # Upload to Codecov if token is available
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false  # Don't fail if Codecov is down or token missing
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      # Generate HTML coverage report for artifact upload
      - name: Generate HTML coverage report
        run: cargo llvm-cov --workspace --html

      # Upload HTML coverage report as artifact
      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/llvm-cov/html/
          retention-days: 30

      # Add coverage summary to GitHub Actions summary
      - name: Generate coverage summary
        run: |
          echo "## Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cargo llvm-cov --workspace --summary-only | tee -a $GITHUB_STEP_SUMMARY

      - name: Run library benchmarks
        run: bash -o pipefail -c "cargo bench -p trop --bench operations_bench -- --sample-size 10 --measurement-time 2 | tee operations-bench.txt"

      - name: Run CLI benchmarks
        run: bash -o pipefail -c "cargo bench -p trop-cli --bench cli_bench -- --sample-size 10 --measurement-time 2 | tee cli-bench.txt"

      - name: Combine benchmark output
        run: cat operations-bench.txt cli-bench.txt > benchmark-results.txt

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: trop benchmark
          tool: 'cargo'
          output-file-path: benchmark-results.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          alert-threshold: '150%'
          comment-on-alert: true

      # Notice if CODECOV_TOKEN is not set
      - name: Notice about Codecov
        if: secrets.CODECOV_TOKEN == ''
        run: |
          echo "::notice::CODECOV_TOKEN secret not set. Coverage uploaded as artifact only."
          echo "To enable Codecov integration, add a CODECOV_TOKEN secret to the repository."

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # Use cached installation if available
      - name: Cache cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
        if: steps.cache-cargo-audit.outputs.cache-hit != 'true'

      # Run security audit - fail on warnings for security issues
      - name: Run security audit
        run: cargo audit --deny warnings
        continue-on-error: true  # Don't block PRs on audit failures

      # Create audit report
      - name: Generate audit report
        run: |
          cargo audit --json > audit-report.json
          echo "## Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if cargo audit --deny warnings; then
            echo "No security vulnerabilities found." >> $GITHUB_STEP_SUMMARY
          else
            echo "Security vulnerabilities detected. Please review the audit report." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 90

  cargo-deny:
    name: Cargo Deny
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # Use cached installation if available
      - name: Cache cargo-deny
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-deny
          key: ${{ runner.os }}-cargo-deny

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked
        if: steps.cache-cargo-deny.outputs.cache-hit != 'true'

      # Check for security advisories
      - name: Check advisories
        run: cargo deny check advisories

      # Check for banned dependencies
      - name: Check bans
        run: cargo deny check bans
        continue-on-error: true

      # Check licenses
      - name: Check licenses
        run: cargo deny check licenses
        continue-on-error: true

      # Check sources
      - name: Check sources
        run: cargo deny check sources
        continue-on-error: true

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # Use cached installation if available
      - name: Cache cargo-license
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-license
          key: ${{ runner.os }}-cargo-license

      - name: Install cargo-license
        run: cargo install cargo-license --locked
        if: steps.cache-cargo-license.outputs.cache-hit != 'true'

      # Generate license report in JSON format
      - name: Generate license report (JSON)
        run: cargo license --json > licenses.json

      # Generate license report in human-readable format
      - name: Generate license report (text)
        run: |
          cargo license --authors --do-not-bundle > licenses.txt
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cargo license >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # Upload license reports as artifacts
      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            licenses.json
            licenses.txt
          retention-days: 90

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    # Only run benchmarks on pushes to main/develop, not on every PR
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # Run benchmarks and save results
      - name: Run benchmarks
        run: |
          cargo bench --no-fail-fast -- --output-format bencher | tee benchmark-results.txt
        continue-on-error: true  # Don't fail if no benchmarks are defined yet

      # Store benchmark results and track performance over time
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: benchmark-results.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          # Alert if performance degrades by more than 150%
          alert-threshold: '150%'
          comment-on-alert: true
          fail-on-alert: false
          # Store results in gh-pages branch
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench
        continue-on-error: true

      # Add benchmark summary
      - name: Benchmark summary
        run: |
          echo "## Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f benchmark-results.txt ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -n 50 benchmark-results.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "No benchmarks were run. Add benchmarks to enable performance tracking." >> $GITHUB_STEP_SUMMARY
          fi

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [coverage, security-audit, cargo-deny, license-check]
    if: always()

    steps:
      - name: Generate quality summary
        run: |
          echo "# Code Quality and Security Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Code Coverage: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cargo Deny: ${{ needs.cargo-deny.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- License Check: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.coverage.result }}" == "success" ] && \
             [ "${{ needs.security-audit.result }}" == "success" ] && \
             [ "${{ needs.cargo-deny.result }}" == "success" ] && \
             [ "${{ needs.license-check.result }}" == "success" ]; then
            echo "All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "Some quality checks failed or were skipped. Please review the logs." >> $GITHUB_STEP_SUMMARY
          fi
