name: Multi-Platform Tests

on:
  push:
    branches: [ main, develop, 'phase-*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test on ${{ matrix.os }} with Rust ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      # Use Swatinem/rust-cache for more efficient caching than manual cache actions
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Check formatting
        run: cargo fmt --all -- --check
        if: matrix.rust == 'stable'

      - name: Run clippy
        run: cargo clippy --all-targets --workspace -- -D warnings

      - name: Build all targets
        run: cargo build --verbose --workspace

      - name: Build release binary
        run: cargo build --release
        
      - name: Run doc tests
        run: cargo test --doc --workspace

      - name: Run unit and integration tests
        run: cargo test --release --verbose --workspace

      - name: Run concurrency tests
        run: cargo test --release concurrent -- --test-threads=4 --nocapture

      - name: Announce Success
        if: success()
        shell: bash
        run: |
          echo "All tests passed successfully!"
          {
            echo "### Build Status: PASSED"
            echo ""
            echo "All multi-platform tests and integration tests completed successfully."
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Announce Failure
        if: failure()
        shell: bash
        run: |
          echo "Some tests failed."
          {
            echo "### Build Status: FAILED"
            echo ""
            echo "Please review the logs for details on the failing steps."
          } >> "$GITHUB_STEP_SUMMARY"
