name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.1.0, v1.2.3, etc.

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Read changelog
        id: changelog
        run: |
          # Try to extract changelog for this version
          if [ -f CHANGELOG.md ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "$(cat CHANGELOG.md)" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=See commit history for changes." >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: trop v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            # trop v${{ steps.get_version.outputs.VERSION }}

            A CLI tool for managing TCP port reservations on development machines.

            ## Installation

            Download the appropriate binary for your platform below:

            - **Linux x86_64**: `trop-linux-x86_64.tar.gz`
            - **Linux ARM64**: `trop-linux-aarch64.tar.gz`
            - **macOS Intel**: `trop-macos-x86_64.tar.gz`
            - **macOS Apple Silicon**: `trop-macos-aarch64.tar.gz`
            - **Windows x64**: `trop-windows-x86_64.zip`

            ### Quick Start

            ```bash
            # Extract the archive
            tar xzf trop-*.tar.gz  # or unzip on Windows

            # Make executable (Unix only)
            chmod +x trop

            # Initialize trop
            ./trop init --with-config

            # Reserve a port
            ./trop reserve --id my-app --port 8080
            ```

            ## Changelog

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

            ## Crates.io

            This release is also available on crates.io:
            - Library: `cargo add trop`
            - CLI: `cargo install trop-cli`

  build-release:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 (GNU)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: trop
            archive_name: trop-linux-x86_64.tar.gz
            use_cross: false

          # Linux ARM64 (GNU)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: trop
            archive_name: trop-linux-aarch64.tar.gz
            use_cross: true

          # macOS x86_64 (Intel)
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: trop
            archive_name: trop-macos-x86_64.tar.gz
            use_cross: false

          # macOS ARM64 (Apple Silicon - M1/M2/M3)
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: trop
            archive_name: trop-macos-aarch64.tar.gz
            use_cross: false

          # Windows x86_64 (MSVC)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: trop.exe
            archive_name: trop-windows-x86_64.zip
            use_cross: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      # Install cross for ARM64 Linux builds
      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      # Build using cross for ARM64 targets
      - name: Build release binary (cross)
        if: matrix.use_cross
        run: cross build --release --target ${{ matrix.target }}

      # Build natively for other targets
      - name: Build release binary (native)
        if: '!matrix.use_cross'
        run: cargo build --release --target ${{ matrix.target }}

      # Create compressed archives for Unix platforms
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}
          cd ../../..
          ls -lh ${{ matrix.archive_name }}

      # Create ZIP archive for Windows
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path ${{ matrix.binary_name }} -DestinationPath ../../../${{ matrix.archive_name }}
          cd ../../..
          Get-Item ${{ matrix.archive_name }} | Format-List

      # Upload the release asset to GitHub release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.archive_name }}
          asset_name: ${{ matrix.archive_name }}
          asset_content_type: application/octet-stream

      # Also upload as workflow artifact for debugging
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binary
          path: ${{ matrix.archive_name }}

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # Verify that tests pass before publishing
      - name: Run tests
        run: cargo test --all-features --workspace

      # Publish the trop library first (trop-cli depends on it)
      - name: Publish trop library
        run: cargo publish --package trop --token ${{ secrets.CARGO_TOKEN }}
        continue-on-error: true  # May already be published or fail if CARGO_TOKEN not set
        if: secrets.CARGO_TOKEN != ''

      # Wait for the library to be available on crates.io before publishing the CLI
      - name: Wait for library to be available
        run: sleep 30
        if: secrets.CARGO_TOKEN != ''

      # Publish the trop-cli binary
      - name: Publish trop-cli binary
        run: cargo publish --package trop-cli --token ${{ secrets.CARGO_TOKEN }}
        continue-on-error: true  # May fail if CARGO_TOKEN not set
        if: secrets.CARGO_TOKEN != ''

      # Add a notice if CARGO_TOKEN is not set
      - name: Notice about crates.io publishing
        if: secrets.CARGO_TOKEN == ''
        run: |
          echo "::notice::CARGO_TOKEN secret not set. Skipping crates.io publishing."
          echo "To enable automatic publishing to crates.io, add a CARGO_TOKEN secret to the repository."

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [create-release, build-release, publish-crate]
    if: always()

    steps:
      - name: Generate release summary
        run: |
          echo "# Release v${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- Release creation: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Binary builds: ${{ needs.build-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Crates.io publish: ${{ needs.publish-crate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release URL" >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
